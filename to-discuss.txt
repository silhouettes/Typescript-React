Immutable Record

I want to put in a type T, and get out a type that has both T and Record
When I have interfaces inheriting from each other, I want the methods to return the derived class
class ABRecord extends Immutable.Record({ a: 1, b: 2 })
// I want to have a wrapping class and declare it to be immutable
Radium: I want to return a generic type

fromJS?






Sections:
Typescript/ES6
	- Problem definition
	- Modules and external libraries
	- Editors
Immutable
Styles
	- Pseudo-selectors and media queries (Radium)
		- Perf? http://jsperf.com/classes-vs-inline-styles/2
		- Moving the computation from the browser to the js
Webpack/React hot loader
Test
l
Talk about:
- Modules
- Live reload
- Source maps & debugging
- Profiling
- Syntax highlighting/intellisense/editors (ts project?)
- ES6
- Test frameworks
- SASS
- Which typescript compiler
- External libraries

JSX-Typescript:
- No ES6 support
- React import can be optimized out
- No typescript definition for Reflux (i.e. limited support for smaller libraries)

Intellisense:
- Works fine in VSCode and VS
- Sublime seems to be using auto-complete, can't figure out why

Compiler:
- Is managed by ts-loader/package.json for build, as well as Visual Studio .csproj, and requires VS extension
- Sublime uses our typescript-sublime and will be on edge. VSCode ships with ts 1.5.0 beta support.

Build:
- Use command line
- May be able to configure a tasks.json file to run tasks in VSCode (and VS in the future)


tsconfig.json vs csproj
May need to constantly update csproj


CSS:
- React inline/Radium
- Sass
- Converters

Test
- Jasmine
- Mocha
- Karma (runner)
- Webdriver (E2E tests)

Look at .d.ts dependency management (tsd)

-------------------------------------------------------------------
Styles

Inline style pros:
- Don't need to work in two files
- Might need to do this for react native anyway
- Don't need to write in a different language
- Scope is handled (no more CSS selectors)
- Have the flexibility to control the degree of sharing/separation
- Easier to reason about what styles are applied to a given component
- Everything in http://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html

Inline style cons:
- JS files become cluttered (?)
- Limitations that need other extensions, eg. radium
- Documents become much larger (server-side rendering or client-side?) - gzip?
- Can't turn classes on and off when debugging - can only do it per element - live reload
- Caching not as good as JS changes more than CSS


Live Reload:
- Webpack/browserify reload
- React-hot-loader, LiveReactLoad

Debug CSS build
Be careful using id's
I don't recommend mixing inline styles and external css as this complicates things
There are tools to convert between inline styles and external css
